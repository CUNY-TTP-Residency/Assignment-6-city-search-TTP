{"version":3,"sources":["components/DisplayCity.jsx","components/CityInfo.jsx","components/HomePage.jsx","App.js","reportWebVitals.js","index.js"],"names":["DisplayCity","props","class","this","zipcode","index","Component","CityInfo","state","hits","componentDidMount","bind","event","console","axios","get","log","cityname","target","value","toUpperCase","setState","data","error","type","placeholder","onChange","map","cityData","HomePage","App","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wWAwBeA,G,wDAnBX,WAAYC,GAAO,uCACTA,G,qDAMN,OACE,8BACE,oBAAIC,MAAQ,MAAZ,SACA,6BACCC,KAAKF,MAAMG,aAHJD,KAAKF,MAAMI,W,GATLC,cCsDXC,G,wDAnDX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,KAAM,IAGV,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBANX,E,uGAWMC,G,qFACpBC,Q,SAAkBC,IAAMC,IAAN,mD,+BAAVC,I,yBAEAC,EAAWL,EAAMM,OAAOC,MAAMC,c,SACjBN,IAAMC,IAAN,iDAAoDE,I,OAAjER,E,OACJN,KAAKkB,SAAS,CAAEZ,KAAMA,EAAKa,OAC3BT,QAAQG,IAAIb,KAAKK,MAAMC,M,kDAEvBI,QAAQU,MAAR,M,gJAQJ,OACI,sBAAKrB,MAAQ,YAAb,UACA,qBAAKA,MAAQ,aAAb,SACI,+BACA,0CAEA,uBAAOsB,KAAM,OAAOC,YAAc,qBAAqBC,SAAYvB,KAAKO,2BAIvEP,KAAKK,MAAMC,KAAKkB,KAAI,SAACC,EAAUvB,GAC3B,OACG,cAAC,EAAD,CACCD,QAAWwB,c,GAzCbtB,cCERuB,EANE,kBACf,8BACE,uECIiBC,E,kDACnB,WAAY7B,GAAO,IAAD,8BAChB,cAAMA,IACDO,MAAQ,CACXC,KAAM,IAHQ,E,qDAQhB,OACE,cAAC,IAAD,UACE,gCACE,6BACE,6BAAI,cAAC,IAAD,CAAMsB,GAAG,IAAT,0BAEN,6BACE,6BAAI,cAAC,IAAD,CAAMA,GAAG,kBAAT,qCAEN,uBAEA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWL,IACjC,cAAC,IAAD,CAAOI,KAAK,kBAAkBC,UAAW3B,gB,GAtBpBD,aCIlB6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d1d8f88c.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport DisplayCityview from './css/DisplayCityview.css'\r\n\r\nclass DisplayCity extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        \r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <div key={this.props.index}>\r\n            <ul class = \"zip\">\r\n            <li>\r\n            {this.props.zipcode}\r\n            </li>\r\n            </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayCity;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport DisplayCity from './DisplayCity';\r\nimport CityInfoview from './css/CityInfoview.css'\r\n\r\nclass CityInfo extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hits: []\r\n        };\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        \r\n    }\r\n\r\n\r\n    async componentDidMount(event) {\r\n        console.log(await axios.get(`https://ctp-zip-api.herokuapp.com/city/BROOKLYN`))\r\n        try {    \r\n            let cityname = event.target.value.toUpperCase();\r\n            let hits = await axios.get(`https://ctp-zip-api.herokuapp.com/city/${cityname}`);\r\n            this.setState({ hits: hits.data });\r\n            console.log(this.state.hits)\r\n        } catch (error){\r\n            console.error(error);\r\n        }\r\n    }\r\n\r\n\r\n  \r\n\r\n    render(){\r\n        return(\r\n            <div class = \"container\">\r\n            <div class = \"user_input\">\r\n                <form>\r\n                <label>\r\n                City: \r\n                <input type= \"text\" placeholder = \"Find all zip codes\" onChange = {this.componentDidMount}/>\r\n                </label>\r\n                </form>\r\n                </div>\r\n                {this.state.hits.map((cityData, index) => {\r\n                     return(\r\n                        <DisplayCity\r\n                         zipcode = {cityData}\r\n                        />\r\n                    )\r\n                })}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\nexport default CityInfo;","import React from 'react';\r\n\r\nconst HomePage = () => (\r\n  <div>\r\n    <h1>This is the homepage on zip-search</h1>\r\n  </div>\r\n);\r\n\r\nexport default HomePage","import { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport './App.css';\r\n\r\nimport CityInfo from './components/CityInfo'\r\nimport HomePage from './components/HomePage'\r\n\r\nexport default class App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hits: [],\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <ul>\r\n            <li><Link to='/'>HomePage</Link></li>\r\n          </ul>\r\n          <ul>\r\n            <li><Link to='/city/:cityname'>Search By City Name</Link></li>\r\n          </ul>\r\n          <hr />\r\n\r\n          <Switch>\r\n            <Route exact path='/' component={HomePage} />\r\n            <Route path='/city/:cityname' component={CityInfo} />\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n  }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}